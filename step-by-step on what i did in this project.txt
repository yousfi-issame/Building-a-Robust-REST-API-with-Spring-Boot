Project Steps:

Step 01 - Initializing a REST API Project with Spring Boot:
  * Set up the project structure and dependencies using Spring Initializr.
  * Configured the project to use Spring Boot.

Step 06 - Designing the REST API for a Social Media Application:
  * Discussed the design and structure of a REST API for a social media application.
  * Defined the resources and endpoints required for user-related operations.

Step 07 - Creating User Bean and UserDaoService:
  * Created a User bean and implemented a User DAO service to manage user data.

Step 08 - Implementing GET Methods for User Resource:

  * Implemented GET methods to retrieve user information.
  * Configured the API to handle different request types and parameters.
    
Step 09 - Implementing POST Method to Create User Resource:
  * Added functionality to create a new user using the POST method.
  * Handled request body and response codes appropriately.
    
Step 10 - Enhancing POST Method to return correct HTTP Status Code and Location URI:
  * Updated the POST method to return the appropriate HTTP status code and the URI of the created resource.

Step 11 - Implementing Exception Handling - 404 Resource Not Found:
  * Implemented exception handling to return a proper response when a resource is not found (HTTP 404).

Step 12 - Implementing Generic Exception Handling for all Resources:

  * Created a global exception handler to handle exceptions across all resources.
  * Standardized error responses for exceptions.

Step 13 - Implementing DELETE Method to delete a User Resource:
  * Implemented the DELETE method to delete a user resource based on the user ID.

Step 14 - Implementing Validations for REST API:
  * Added validation logic to ensure the correctness of user input.
  * Handled validation errors and returned appropriate responses.
    
Step 17 - Configuring Auto Generation of Swagger Documentation:
  * Configured Swagger to automatically generate API documentation.
    
Step 18 - Exploring Content Negotiation - Implementing Support for XML:
  * Configured the API to support content negotiation between XML and JSON formats.
  * Implemented XML serialization and deserialization for API requests and responses.
    
Step 19 - Exploring Internationalization for REST API:
  * Implemented internationalization support to provide API responses in different languages.
  * Configured message bundles and handled locale-specific content.
    
Step 20 - Versioning REST API - URI Versioning:
  * Implemented URI versioning to manage API versions.
    
Step 21 - Versioning REST API - Request Param, Header, and Content Negotiation:
  * Expanded the versioning capabilities by implementing request parameters, header, and content negotiation-based versioning.
    
Step 22 - Implementing HATEOAS for REST API:
  * Implemented HATEOAS (Hypermedia as the Engine of Application State) for the REST API to provide self-descriptive responses.
    
Step 23 - Implementing Static Filtering for REST API:  
  * Configured static filtering to exclude certain fields from API responses.
  * Implemented field-level filtering based on client requests.
    
Step 24 - Implementing Dynamic Filtering for REST API:
  * Implemented dynamic filtering to allow clients to specify the desired fields in API responses.
  * Supported field-level filtering based on client requests.
    
Step 25 - Monitoring APIs with Spring Boot Actuator:
  * Integrated Spring Boot Actuator to monitor and manage the REST API.
  * Explored various endpoints provided by Spring Boot Actuator for monitoring and health checks.
    
Step 26 - Exploring APIs with Spring Boot HAL Explorer:
  * Configured the Spring Boot HAL Explorer to visualize and interact with the REST API.
  * Explored the functionalities provided by HAL Explorer for API exploration and testing.
    
Step 27 - Connecting REST API to H2 using JPA and Hibernate :
  * Explored the integration of H2 in-memory database with JPA and Hibernate.
    
Step 28 - Creating User Entity and some test data:
  * Created a User entity class representing the user data structure.
  * Populated the H2 database with test data for users.
    
Step 29 - Enhancing REST API to connect to H2 using JPA and Hibernate:
  * Integrated JPA and Hibernate to interact with the H2 database.
  * Updated the API endpoints to fetch and manipulate user data from the database.
    
Step 30 - Creating Post Entity with Many-to-One Relationship with User Entity:
  * Created a Post entity class representing the posts made by users.
  * Established a many-to-one relationship between users and posts.
    
Step 31 - Implementing a GET API to retrieve all Posts of a User:
  * Implemented an API endpoint to retrieve all posts associated with a specific user.
  * Handled the retrieval of related data using JPA relationships.
    
Step 32 - Implementing a POST API to create a Post for a User:
  * Implemented an API endpoint to create a new post for a user.
  * Established the relationship between the user and the created post.
    
Step 33 - Exploring JPA and Hibernate Queries for REST API:
  * Explored the capabilities of JPA and Hibernate for executing queries.
  * Implemented custom queries to retrieve specific data from the database.
    
Step 34 - Connecting REST API to MySQL Database:
  * connecting the REST API to a MySQL database.
  * using MySQL for data persistence.
    
Step 34z - OPTIONAL - Installing Docker:
  * installing Docker.
    
Step 35 - OPTIONAL - Connecting REST API to MySQL Database - Implementation:
  * Optional step: Configured the REST API to connect to a MySQL database.
  * Updated the data source configuration and database connection properties.
    
Step 36 - Implementing Basic Authentication with Spring Security:
  * Secured the REST API endpoints using basic authentication.
  * Implemented user authentication and authorization using Spring Security.
    
Step 37 - Enhancing Spring Security Configuration for Basic Authentication:
  * Configured additional security features such as CSRF protection and session management.
  * Implemented custom authentication provider and user details service.
    
This project provides a comprehensive understanding of REST API development using Spring Boot and covers various essential concepts and advanced features. The resulting API is secure, scalable, and incorporates industry best practices.
